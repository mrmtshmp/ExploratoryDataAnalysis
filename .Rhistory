test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(length(pos_miss) > 0){
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vec[pos_miss-1]+vec[pos_miss+1])/2
}
}
return(vec)
}
)
miss_which
vec
test
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(length(pos_miss) > 0){
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vec[pos_miss-1]+vec[pos_miss+1])/2
}
}
return(t(vec))
}
)
miss_which
test
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(length(pos_miss) > 0){
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vec[pos_miss-1]+vec[pos_miss+1])/2
}
}
return(vec)
}
)
miss_which
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(length(pos_miss) > 0){
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vec[pos_miss-1]+vec[pos_miss+1])/2
}
}
return(vec)
}
) %>%
t()
require(magrittr)
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(length(pos_miss) > 0){
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vec[pos_miss-1]+vec[pos_miss+1])/2
}
}
return(vec)
}
) %>%
t()
miss_which
test
require(devtools)
document()
check()
document()
warnings()
document()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
document()
document()
document()
check()
document()
parse(text="a <-1+1")
a
eval(parse(text="a <-1+1"))
test <- data.frame(a=c(1,1,1), b=c("a","b","c"))
eval(parse(text="test[1,] <- 1+1"))
eval(parse(text="test[1,1] <- 1+1"))
test
test <- data.frame(a=c(1,1,1), b=c("a","b","c"))
test
eval(parse(text="test[1,1] <- 1+1"))
test
eval(parse(text="test[,2] <- as.factor(test[2,])"))
eval(parse(text="test[,2] <- factor(test[2,])"))
document()
a <- "1"
a
eval(parse(text=sprintf("b <- as.%s(a)", "numeric")))
b
a
document()
document()
col.visit
val.Visit  = c(0, 6, 18)
val.Visit  = c(0, 6, 18)
col.visit <- sprintf("%s.%s", "vis", lab.Visit)
lab.Visit  = c(0, 6, 18)
col.visit <- sprintf("%s.%s", "vis", lab.Visit)
col.visit
leastChange <- data %>%
left_join(ADS.Saihi, by="SubjID") %>%
dplyr::select_(setdiff(names(leastChange), col.visit))
require(devtools)
document()
document()
check()
require(devtools)
document()
require(devtools)
document()
check()
document()
require(devtools)
require(ggplot2)
require(ggbeeswarm)
help(position_quasirandom)
document()
check()
document()
check()
check()
document()
60000/18
60000/28
require(devtools)
document()
document()
document()
require(devtools)
document()
require(ExploratoryDataAnalysis)
document()
document()
document()
require(devtools)
document()
require(devtools)
document()
check()
use_package("coin")
check()
document()
document()
document()
document()
document()
require(devtools)
document
document()
document()
check()
require(document)
require(devtools)
document()
document()
docment()
document()
document()
document()
document()
document()
document()
ggdata@data
document()
document()
document()
coord_fixed(ratio = 1)
data[,var.x]
quantile(data[,D$var.x],probs = 1)
data[,D$var.x]
quantile(data[,D$var.x],probs = 1)
data
quantile(c(1,2,3,4,5),probs = 1)
quantile(c(1,2,3,4,5),probs = 0)
document()
document()
require(ggplot2)
help(  coord_fixed)
require(devtools)
document()
document()
document()
document()
document()
document()
document()
mf.test <- function(...){return(rnorm(...))}
warnings()
mf.test(n=10,mu=0,sd=1)
mf.test(n=10,mean=0,sd=1)
mf.test <- function(...){return(rnorm(sd=1,...))}
mftest(n=10,mean=0,sd=2)
mf.test(n=10,mean=0,sd=2)
mf.test(n=10,mean=0)
document()
require(devtools)
document()
ExploratoryDataAnalysis::MIPermute
help(discretize)
document()
document()
document()
document()
document()
document()
warnings()
check()
document()
T1_for_factorVar <- function(df.input, ADS){
result <- df.input %>%
filter(var.type=="factor") %>%
ddply(
.(var.x, str),
function(D){
if(D$var.type=="factor"){
count <-
table(
as.factor(ADS[ADS[,D$var.x]==D$str, D$var.x]),
as.factor(ADS[ADS[,D$var.x]==D$str, ,D$var.y]),
dnn = c("var.x value", "var.y value")
) %>%
data.frame() %>%
mutate(
Prop = round(Freq/ sum(Freq), 3)
)
print(length(unique(ADS[,D$var.y])))
if(length(unique(ADS[,D$var.x]))>1 & length(unique(ADS[,D$var.y]))>1){
res.fisher.test <- fisher.test(
as.factor(ADS[ADS[,D$var.x]==D$str,D$var.x]),
as.factor(ADS[ADS[,D$var.x]==D$str,D$var.y])
)
p.val.fisher.test <- res.fisher.test$p.value
names(p.val.fisher.test) <- "p.val.Fisher_test"
}else{
p.val.fisher.test <- NA
}
count[  , "p.val.Fisher_test"] <- ""
count[ 1, "p.val.Fisher_test"] <- as.character(p.val.fisher.test)
res <- count
}
return(res)
}
)
return(result)
}
require(document())
require(devtools)
document()
summ_hist_theme
summ_hist_theme
require(ExploratoryDataAnalysis)
summ_hist_theme
require(devtools)
document()
mf.rsamp.wilcox_test.statistic <-
function(
var.x="Disease",
data = pData.obj.aggTaxa.ADS,
count.table = MRcounts(obj.aggTaxa.ADS),
ori.count.table = MRcounts(obj.aggTaxa),
itt.rsamp = itt.rsamp.wilcox,
func.stat = vegan::diversity,
...
){
if(ncol(ori.count.table) > ncol(count.table)){
ori.count.table <-
ori.count.table[,colnames(count.table)]
}
data[,"cmp.group"] <- data[,var.x]
df.itt <-
data.frame(
'dummy'=1, 'itt' = seq(1:itt.rsamp)
)
vec.rowSumPosi <- apply(
count.table,
1,
FUN = function(x){
return(sum(x)>0)
}
)
res.rsamp.wilcox_test..statistic..standardizedlinearstatistic <-
ddply(
df.itt,
.(itt),
.progress = "text",
function(itt){
if(itt$itt==1){
rsamp.MRcounts.obj.aggTaxa <- count.table
}else{
rsamp.MRcounts.obj.aggTaxa <-
ori.count.table[
sample(
x = 1:nrow(ori.count.table),
size = sum(vec.rowSumPosi)
),
]
}
data$alpha_div.rsamp_i <-
apply(
rsamp.MRcounts.obj.aggTaxa, MARGIN = 2,
func.stat, ...
)
res.wilcox_test <- coin::wilcox_test(
alpha_div.rsamp_i ~ factor(cmp.group), data=data, distribution="exact"
)
statistics <- res.wilcox_test@statistic@standardizedlinearstatistic
return(statistics)
}
)
return( res.rsamp.wilcox_test..statistic..standardizedlinearstatistic)
}
require(debug)
require(devtools)
document()
document()
z=5
3x-2y=2
2x+2y=-6
5x=-4
z=2
3x-2y=5
x+y=0
x=-y
install.packages('copula')
require(copula)
install.packages('gsl')
install.packages('gsl')
require(copula)
require(devtools)
document()
MIPermute
require(robustbase)
help("lmrob")
mean(list(5,1,1))
substitute(mean(x),list(5,1,1))
substitute(mean(x),x=list(5,1,1))
help(substitute)
my.mean <- substitute(expression(rnorm(10,mean=mean,sd = sd)), list(mean=2,sd=2))
my.mean()
my.mean
my.mean <- substitute(rnorm(10,mean=mean,sd = sd), list(mean=2,sd=2))
my.mean()
dep.my.mean <- deparse(my.mean)
dep.my.mean
my.mean <- substitute(rnorm(x,mean=mean,sd = sd), list(mean=2,sd=2))
dep.my.mean <- deparse(my.mean)
dep.my.mean(10)
dep.my.mean
dep.my.mean <- parse(text = my.mean)
dep.my.mean
var.x= "BVAS"
fml=as.formula(sprintf("alpha_div.rsamp_i ~  ~ %s", var.x))
fml_sub=as.formula(sprintf("alpha_div.rsamp_i_sub ~  ~ %s", var.x))
require(devtools)
document()
document()
document()
document()
require(robustbase)
version(robustbase)
help(robustbase)
help("lmrob")
test <- data.frame(aaa = c(1,0,3,0,5,5))
test
test <- t(test)
test
testest <- test > 0
testest
testest <- c(test > 0)
testest
require(devtools)
document()
document()
document()
document()
document()
document()
require(devtools)
dovcument()
document()
document()
document()
document()
document()
require(devtools)
document()
mf.rsamp.lm <-
function(
var.x= "BVAS",
data = pData.obj.aggTaxa.ADS,
count.table = MRcounts(obj.aggTaxa.ADS),
ori.count.table = MRcounts(obj.aggTaxa),
itt.rsamp = itt.rsamp.wilcox,
func.stat = vegan::diversity,
func.lm = robustbase::lmrob,
lm.summary.statistics="coefficients",
confint = NA,
list.do.call.func.stat = list(index="simpson"),
list.do.call.func.lm = list(method="MM"),
...
){
if(!(var.x %in% names(data))) stop("var.x is not in data.")
fml=as.formula(sprintf("alpha_div.rsamp_i ~ %s", var.x))
data[,"cmp.group"] <- data[,var.x]
inc.sample.ID <-
colnames(count.table)[
colnames(count.table) %in% rownames(data)
]
vec.rowSumPosi <- apply(
count.table,
1,
FUN = function(x){
return(sum(x)>0)
}
)
statistic <- function(data){
res.lm <-
try(
do.call(func.lm, args = c(list(fml, data), list.do.call.func.lm))
)
if(class(res.lm)!="try-error"){
statistics <-
summary(res.lm)[[lm.summary.statistics]] %>%
data.frame() %>%
rownames_to_column("terms")
return(statistics)
}
}
count.table <- count.table[,inc.sample.ID]
ori.count.table <- ori.count.table[,inc.sample.ID]
ori.count.table <- ori.count.table[vec.rowSumPosi,]
print(sprintf('IDs of analyzed samples:%s', paste(inc.sample.ID,collapse = ' ')))
df.itt <-
data.frame(
'dummy'=1, 'itt' = seq(1:itt.rsamp)
)
res.rsamp.summary.lm <-
ddply(
df.itt,
.(itt),
.progress = "text",
function(itt){
if(itt$itt==1){
rsamp.MRcounts.obj.aggTaxa <- count.table
}else{
rsamp.MRcounts.obj.aggTaxa <-
ori.count.table[
sample(
x = 1:nrow(ori.count.table),
size = sum(vec.rowSumPosi)
),
]
}
data$alpha_div.rsamp_i <-
apply(
rsamp.MRcounts.obj.aggTaxa, MARGIN = 2,
function(mat)
do.call( func.stat, args = c(list(x = mat), list.do.call.func.stat))
)
res.lm <-
try(
do.call(func.lm, args = c(list(fml, data), list.do.call.func.lm))
)
if(class(res.lm)!="try-error"){
statistics <-
summary(res.lm)[[lm.summary.statistics]] %>%
data.frame() %>%
rownames_to_column("terms")
return(statistics)
}
}
)
return(res.rsamp.summary.lm)
}
warnings()
require(devtools)
document()
document()
check()
use_package("boot")
use_package("robustbase")
check()
