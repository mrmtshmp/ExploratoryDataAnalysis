aes(
y=get(var.y), x=get(var.x)
),
size = size,
#        width = 0.3,
col=plot.col
)
# jitter <- geom_jitter(
#   aes(
#     y   = get(var.y),
#     x   = get(var.x)
#     ),
#   size = size,
#   width = 0.3,
#   col=plot.col
#   )
}
plot.box_plot <-
ggdata +
geom_boxplot(
aes(
y   = get(var.y),
x   = get(var.x)
),
color=box.col,
outlier.alpha = 0
) +
jitter +
plot.color +
#      scale_y_log10() +
scale_x_discrete() +
facet_grid(
as.formula(formula.facet)
) +
theme_bw() +
xlab(var.x) +
ylab(var.y) +
labs(
title = str,
caption = var.caption
)
scale.y <- unique(scale.var.y)
if(scale.y=="log10"){
plot(
plot.box_plot + scale_y_log10()
)
}
if(scale.y=="not_scale"){
plot(
plot.box_plot
)
}
dev.off()
}
}}}
document()
check()
plot.col="black"
plot.color <-
scale_color_brewer(
low = plot.col,
high = plot.col
)
plot.color <-
scale_color_gradient(
low = plot.col,
high = plot.col
)
plot.color
plot.color(5)
plot.color
document()
check()
document()
document()
document()
check()
document()
check()
document()
check()
document()
check()
document()
use_package("ggbeeswarm")
check()
document()
check()
document()
document()
Bin_width <- function(vec, method){
bw =
function(x, f) ceiling((max(x) - min(x)) / f(x))
FD =
function(x) bw(x, nclass.FD)
scott =
function(x) bw(x, nclass.scott)
sturges =
function(x) bw(x, nclass.Sturges)
return(eval(parse(text = sprintf("%s(vec)". method))))
}
Bin_width <- function(vec, method){
bw =
function(x, f) ceiling((max(x) - min(x)) / f(x))
FD =
function(x) bw(x, nclass.FD)
scott =
function(x) bw(x, nclass.scott)
sturges =
function(x) bw(x, nclass.Sturges)
return(eval(parse(text = sprintf("%s(vec)", method))))
}
Bin_width(c(1:100), "FD")
Bin_width <- function(vec, method){
bw =
function(x, f) ceiling((max(x) - min(x)) / f(x))
FD =
function(x) bw(x, nclass.FD)
scott =
function(x) bw(x, nclass.scott)
sturges =
function(x) bw(x, nclass.Sturges)
return(
eval(parse(text = sprintf("%s(vec)", "sum")))
)
}
Bin_width(c(1:100), "FD")
sum(1:100
)
as.logical(1)
as.logical(1)
test <- data.frame(a=c(123,123,123),b=c(234,234,234))
test
test_1 <- data.frame(a=c(0,1,0), b=c(1,1,0))
test[test_1]
test[as.logical(test_1)]
as.logical(test_1)
test[mapply(test_1, as.logical)]
mapply(test, function(x){mapply(test_1,as.logical)})
mapply(test, FUN = function(x){mapply(test_1,as.logical)})
mapply(test, FUN = function(x){mapply(test_1,FUN = as.logical)})
test[mapply(test, FUN = function(x){mapply(test_1,FUN = as.logical)})]
test
test_1
test[test_1]
test[as.matrix(test_1)]
as.matrix(test_1)
test[mapply(test_1,FUN = as.logical)]
which(test_1)
which(test_1==1)
unlist(test)
unlist(test)[which(test_1==1)]
miss_which <- apply(test_1, MARGIN = 1, function(vec) which(vec==1))
miss_which
test_1
miss_which <-
sapply(
test_1,
MARGIN = 1,
function(vec) {which(vec==1)}
)
miss_which <-
sapply(
test_1,
#        MARGIN = 1,
function(vec) {which(vec==1)}
)
miss_which
miss_which <-
vapply(
test_1,
#        MARGIN = 1,
function(vec) {which(vec==1)}
)
miss_which <-
tapply(
test_1,
#        MARGIN = 1,
function(vec) {which(vec==1)}
)
miss_which <-
sapply(
test_1,
#        MARGIN = 1,
function(vec) {which(vec==1)}
)
miss_which
test[miss_which]
data.frame([miss_which)
data.frame(miss_which)
miss_which <-
apply(
test_1,
MARGIN = 1,
function(vec) {which(vec==1)}
)
miss_which
test <- data.frame(a=c(1,2,3), b=c(2,4,3), c=c(3,3,3),d=c(1,1,0))
test
test[3,3] <- NA
test
test[2,2] <- NA
test
data.frame(c(1:25), L=5)
data.frame(c(1:25), 1L=5)
data.frame(c(1:25), L1=5)
test
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vex[pos_miss-1]+vex[pos_miss+1])/2
}
}
)
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vex[pos_miss-1]+vex[pos_miss+1])/2
}
}
)
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
print(pos_miss)
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vex[pos_miss-1]+vex[pos_miss+1])/2
}
}
)
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(pos_miss > 0){
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vex[pos_miss-1]+vex[pos_miss+1])/2
}
}
}
)
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(length(pos_miss) > 0){
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vex[pos_miss-1]+vex[pos_miss+1])/2
}
}
}
)
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(length(pos_miss) > 0){
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vec[pos_miss-1]+vex[pos_miss+1])/2
}
}
}
)
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(length(pos_miss) > 0){
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vec[pos_miss-1]+vec[pos_miss+1])/2
}
}
}
)
miss_which
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(length(pos_miss) > 0){
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vec[pos_miss-1]+vec[pos_miss+1])/2
}
}
return(vec)
}
)
miss_which
vec
test
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(length(pos_miss) > 0){
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vec[pos_miss-1]+vec[pos_miss+1])/2
}
}
return(t(vec))
}
)
miss_which
test
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(length(pos_miss) > 0){
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vec[pos_miss-1]+vec[pos_miss+1])/2
}
}
return(vec)
}
)
miss_which
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(length(pos_miss) > 0){
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vec[pos_miss-1]+vec[pos_miss+1])/2
}
}
return(vec)
}
) %>%
t()
require(magrittr)
miss_which <-
apply(
test,
MARGIN = 1,
function(vec){
pos_miss <- which(is.na(vec))
if(length(pos_miss) > 0){
if(pos_miss > 1 & pos_miss < length(vec)){
vec[pos_miss] <- (vec[pos_miss-1]+vec[pos_miss+1])/2
}
}
return(vec)
}
) %>%
t()
miss_which
test
require(devtools)
document()
check()
document()
warnings()
document()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
document()
document()
document()
check()
document()
parse(text="a <-1+1")
a
eval(parse(text="a <-1+1"))
test <- data.frame(a=c(1,1,1), b=c("a","b","c"))
eval(parse(text="test[1,] <- 1+1"))
eval(parse(text="test[1,1] <- 1+1"))
test
test <- data.frame(a=c(1,1,1), b=c("a","b","c"))
test
eval(parse(text="test[1,1] <- 1+1"))
test
eval(parse(text="test[,2] <- as.factor(test[2,])"))
eval(parse(text="test[,2] <- factor(test[2,])"))
document()
a <- "1"
a
eval(parse(text=sprintf("b <- as.%s(a)", "numeric")))
b
a
document()
document()
col.visit
val.Visit  = c(0, 6, 18)
val.Visit  = c(0, 6, 18)
col.visit <- sprintf("%s.%s", "vis", lab.Visit)
lab.Visit  = c(0, 6, 18)
col.visit <- sprintf("%s.%s", "vis", lab.Visit)
col.visit
leastChange <- data %>%
left_join(ADS.Saihi, by="SubjID") %>%
dplyr::select_(setdiff(names(leastChange), col.visit))
require(devtools)
document()
document()
check()
require(devtools)
document()
require(devtools)
document()
check()
document()
require(devtools)
require(ggplot2)
require(ggbeeswarm)
help(position_quasirandom)
document()
check()
document()
check()
check()
document()
60000/18
60000/28
require(devtools)
document()
document()
document()
require(devtools)
document()
require(ExploratoryDataAnalysis)
document()
document()
document()
require(devtools)
document()
require(devtools)
document()
check()
use_package("coin")
check()
document()
document()
document()
document()
document()
require(devtools)
document
document()
document()
check()
require(document)
require(devtools)
document()
document()
docment()
document()
document()
document()
document()
document()
document()
ggdata@data
document()
document()
document()
coord_fixed(ratio = 1)
data[,var.x]
quantile(data[,D$var.x],probs = 1)
data[,D$var.x]
quantile(data[,D$var.x],probs = 1)
data
quantile(c(1,2,3,4,5),probs = 1)
quantile(c(1,2,3,4,5),probs = 0)
document()
document()
require(ggplot2)
help(  coord_fixed)
require(devtools)
document()
document()
document()
document()
document()
document()
document()
