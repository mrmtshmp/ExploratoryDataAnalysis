y=get(var.y),
x=get(var.x),
color=get(var.col)
),
size = size,
width = 0.1,
position =
position_jitter(width = 0.1, height = 0)
)
print("jitter ok")
ggline <- geom_line(
aes(
y=get(var.y), x=get(var.x),
group=get(var.group),
color=get(var.col)
),
position =
position_jitter(
width = 0.1, height = 0
)
)
print("line ok")
}else{
plot.color <-
scale_color_gradient(
low = plot.col,
high = plot.col
)
jitter <- geom_point(
aes(
y=get(var.y),
x=get(var.x),
color=get(var.col)
),
size = size,
width = 0.1,
position =
position_jitter(width = 0.1, height = 0)
)
print("jitter ok")
ggline <- geom_line(
aes(
y=get(var.y), x=get(var.x),
group=get(var.group),
color=get(var.col)
),
position =
position_jitter(
width = 0.1, height = 0
)
)
}
plot.box_plot <-
ggdata +
geom_boxplot(
aes(
y   = get(var.y),
x   = get(var.x)
),
color=box.col,
outlier.alpha = 0
) +
jitter +
ggline +
plot.color +
#      scale_y_log10() +
scale_x_discrete() +
facet_grid(
as.formula(formula.facet)
) +
theme_bw() +
xlab(var.x) +
ylab(var.y) +
labs(
title = str,
caption = var.caption
)
print("layers ok")
scale.y <- unique(scale.var.y)
pdf(
sprintf(
"%s/%s_Panels_%s_var.X_%s_var.Y_%s.pdf",
dir.output,
dn.surfix,
str, var.x, var.y
),
width = 10 * n.str
)
if(scale.y=="log10"){
plot(
plot.box_plot + scale_y_log10()
)
}
if(scale.y=="not_scale"){
plot(
plot.box_plot
)
}
test.mf.boxplot_on_lines <- function(
data,
ggdata,
var.x,
var.y,
var.group,
scale.var.y,
var.caption,
size = 0.5,
var.col=NA,
plot.col="black",
box.col="gray",
str,
dn.surfix
){
print("start ok")
formula.facet <- sprintf("%s ~ %s", ".", str)
print("facet ok")
n.str <- length(
t(
unique(data[,str])
)
)
print("ntr ok")
print(plot.col)
if(
!is.na(match(plot.col, "_"))
) {
plot.color <-
scale_color_gradient(
low = strsplit(plot.col, "_")[[1]][1],
high = strsplit(plot.col, "_")[[1]][2]
)
print("color ok")
jitter <- geom_point(
aes(
y=get(var.y),
x=get(var.x),
color=get(var.col)
),
size = size,
width = 0.1,
position =
position_jitter(width = 0.1, height = 0)
)
print("jitter ok")
ggline <- geom_line(
aes(
y=get(var.y), x=get(var.x),
group=get(var.group),
color=get(var.col)
),
position =
position_jitter(
width = 0.1, height = 0
)
)
print("line ok")
}else{
plot.color <-
scale_color_gradient(
low = plot.col,
high = plot.col
)
jitter <- geom_point(
aes(
y=get(var.y),
x=get(var.x),
color=plot.col
),
size = size,
width = 0.1,
position =
position_jitter(width = 0.1, height = 0)
)
print("jitter ok")
ggline <- geom_line(
aes(
y=get(var.y), x=as.numeric(get(var.x)),
group=get(var.group),
color=plot.col
),
position =
position_jitter(
width = 0.1, height = 0
)
)
}
plot.box_plot <-
ggdata +
geom_boxplot(
aes(
y   = get(var.y),
x   = get(var.x)
),
color=box.col,
outlier.alpha = 0
) +
jitter +
ggline +
plot.color +
#      scale_y_log10() +
scale_x_discrete() +
facet_grid(
as.formula(formula.facet)
) +
theme_bw() +
xlab(var.x) +
ylab(var.y) +
labs(
title = str,
caption = var.caption
)
print("layers ok")
scale.y <- unique(scale.var.y)
pdf(
sprintf(
"%s/%s_Panels_%s_var.X_%s_var.Y_%s.pdf",
dir.output,
dn.surfix,
str, var.x, var.y
),
width = 10 * n.str
)
if(scale.y=="log10"){
plot(
plot.box_plot + scale_y_log10()
)
}
if(scale.y=="not_scale"){
print(scale.var.y)
plot(
plot.box_plot
)
}
dev.off()
}
mf.boxplot <- function(
data,
ggdata,
var.x,
var.y,
scale.var.y,
var.caption,
size = 0.5,
var.col=NA,
plot.col="black",
box.col="gray",
str,
str.x=NULL,
str.y=NULL,
dn.surfix
){
if(!is.null(str.x) & !is.null(str.y)){
formula.facet <-
sprintf("%s ~ %s", str.x, str.y)
str <- str.x
}else{
if(is.null(str)){stop("argument 'str' is NULL.")}
formula.facet <-
sprintf("%s ~ %s", ".", str)
}
print(str)
nx.str <- length(
unique(as.character(data[,str]))
)
nx.var <- length(
unique(as.character(data[,var.x]))
)
if(!is.null(str.y)){
ny.str <- length(
unique(as.character(data[,str.y]))
)
}else{
ny.str <- 1
}
pdf(
sprintf(
"%s/%s_Panels_%s_var.X_%s_var.Y_%s.pdf",
dir.output,
dn.surfix,
str, var.x, var.y
),
width = 5 * nx.str *nx.var,
height = 2.5 * ny.str
)
if(
!is.na(match(plot.col, "_"))
) {
plot.color <-
scale_color_gradient(
low = strsplit(plot.col, "_")[[1]][1],
high = strsplit(plot.col, "_")[[1]][2]
)
jitter <- geom_beeswarm(
aes(
y=get(var.y), x=get(var.x), color=get(var.col)
),
size = size,
width = 0.3
)
# jitter <- geom_jitter(
#   aes(
#     y   = get(var.y),
#     x   = get(var.x),
#     color=get(var.col)
#     ),
#   size = size,
#   width = 0.3
#   )
}else{
plot.color <-
scale_color_gradient(
low = plot.col,
high = plot.col
)
jitter <- geom_beeswarm(
aes(
y=get(var.y), x=get(var.x)
),
size = size,
#        width = 0.3,
col=plot.col
)
# jitter <- geom_jitter(
#   aes(
#     y   = get(var.y),
#     x   = get(var.x)
#     ),
#   size = size,
#   width = 0.3,
#   col=plot.col
#   )
}
plot.box_plot <-
ggdata +
geom_boxplot(
aes(
y   = get(var.y),
x   = get(var.x)
),
color=box.col,
outlier.alpha = 0
) +
jitter +
plot.color +
#      scale_y_log10() +
scale_x_discrete() +
facet_grid(
as.formula(formula.facet)
) +
theme_bw() +
xlab(var.x) +
ylab(var.y) +
labs(
title = str,
caption = var.caption
)
scale.y <- unique(scale.var.y)
if(scale.y=="log10"){
plot(
plot.box_plot + scale_y_log10()
)
}
if(scale.y=="not_scale"){
plot(
plot.box_plot
)
}
dev.off()
}
}}}
document()
check()
plot.col="black"
plot.color <-
scale_color_brewer(
low = plot.col,
high = plot.col
)
plot.color <-
scale_color_gradient(
low = plot.col,
high = plot.col
)
plot.color
plot.color(5)
plot.color
document()
check()
document()
document()
document()
check()
document()
check()
document()
check()
document()
check()
document()
use_package("ggbeeswarm")
check()
document()
check()
document()
document()
Bin_width <- function(vec, method){
bw =
function(x, f) ceiling((max(x) - min(x)) / f(x))
FD =
function(x) bw(x, nclass.FD)
scott =
function(x) bw(x, nclass.scott)
sturges =
function(x) bw(x, nclass.Sturges)
return(eval(parse(text = sprintf("%s(vec)". method))))
}
Bin_width <- function(vec, method){
bw =
function(x, f) ceiling((max(x) - min(x)) / f(x))
FD =
function(x) bw(x, nclass.FD)
scott =
function(x) bw(x, nclass.scott)
sturges =
function(x) bw(x, nclass.Sturges)
return(eval(parse(text = sprintf("%s(vec)", method))))
}
Bin_width(c(1:100), "FD")
Bin_width <- function(vec, method){
bw =
function(x, f) ceiling((max(x) - min(x)) / f(x))
FD =
function(x) bw(x, nclass.FD)
scott =
function(x) bw(x, nclass.scott)
sturges =
function(x) bw(x, nclass.Sturges)
return(
eval(parse(text = sprintf("%s(vec)", "sum")))
)
}
Bin_width(c(1:100), "FD")
sum(1:100
)
as.logical(1)
as.logical(1)
test <- data.frame(a=c(123,123,123),b=c(234,234,234))
test
test_1 <- data.frame(a=c(0,1,0), b=c(1,1,0))
test[test_1]
test[as.logical(test_1)]
as.logical(test_1)
test[mapply(test_1, as.logical)]
mapply(test, function(x){mapply(test_1,as.logical)})
mapply(test, FUN = function(x){mapply(test_1,as.logical)})
mapply(test, FUN = function(x){mapply(test_1,FUN = as.logical)})
test[mapply(test, FUN = function(x){mapply(test_1,FUN = as.logical)})]
test
test_1
test[test_1]
test[as.matrix(test_1)]
as.matrix(test_1)
test[mapply(test_1,FUN = as.logical)]
which(test_1)
which(test_1==1)
unlist(test)
unlist(test)[which(test_1==1)]
miss_which <- apply(test_1, MARGIN = 1, function(vec) which(vec==1))
miss_which
test_1
miss_which <-
sapply(
test_1,
MARGIN = 1,
function(vec) {which(vec==1)}
)
miss_which <-
sapply(
test_1,
#        MARGIN = 1,
function(vec) {which(vec==1)}
)
miss_which
miss_which <-
vapply(
test_1,
#        MARGIN = 1,
function(vec) {which(vec==1)}
)
miss_which <-
tapply(
test_1,
#        MARGIN = 1,
function(vec) {which(vec==1)}
)
miss_which <-
sapply(
test_1,
#        MARGIN = 1,
function(vec) {which(vec==1)}
)
miss_which
test[miss_which]
data.frame([miss_which)
data.frame(miss_which)
miss_which <-
apply(
test_1,
MARGIN = 1,
function(vec) {which(vec==1)}
)
miss_which
