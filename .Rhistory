document()
document()
use_package("vegan")
use_package("GUnifrac")
use_package("GUniFrac")
use_package("tibble")
check()
param.UniFrac= c(0, 0.5, 1.0, "UW")
if(length(which(param.UniFrac %in% "UW")>0)){
.param.UniFrac <- as.numeric(
param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
])
.UW <- TRUE
} else {
.param.UniFrac <- param.UniFrac
.UW <- FALSE
}
.param.UniFrac
method <- "bray"
type_extr="Type%in%c(3,4)"
Name_type=df.Name_type
otutable_on_taxonomy <- data
.method    <- method
.type_extr <- type_extr
.Name_type <- Name_type
if(length(which(param.UniFrac %in% "UW")>0)){
.param.UniFrac <- as.numeric(
param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
])
.UW <- TRUE
print(.param.UniFrac)
} else {
.param.UniFrac <- param.UniFrac
.UW <- FALSE
print(.param.UniFrac)
}
param.UniFrac= c(0, 0.5, 1.0, "UW")
otutable_on_taxonomy <- data
.method    <- method
.type_extr <- type_extr
.Name_type <- Name_type
if(length(which(param.UniFrac %in% "UW")>0)){
.param.UniFrac <- as.numeric(
param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
])
.UW <- TRUE
print(.param.UniFrac)
} else {
.param.UniFrac <- param.UniFrac
.UW <- FALSE
print(.param.UniFrac)
}
sprintf("d%s_vegan", .method)
vegan::vegdist(
otutable_on_taxonomy,
method = .method
) %>%
extract_type(
extract_type,
df.Name_type
)
assign(
sprintf("d%s_vegan", .method),
vegan::vegdist(
otutable_on_taxonomy,
method = .method
) %>%
extract_type(
extract_type,
df.Name_type
)
)
vegan::vegdist(
otutable_on_taxonomy,
method = .method
) %>%
extract_type(
extract_type,
df.Name_type
)
vegan::vegdist(
otutable_on_taxonomy,
method = .method
)
otutable_on_taxonomy
otutable_on_taxonomy
help(vegdist)
vegdist(
.otutable_on_taxonomy,
method = .method
)
vegdist(
otutable_on_taxonomy,
method = .method
)
otutable_on_taxonomy
vegdist(
otutable_on_taxonomy,
method = .method
)
vegdist(
.otutable_on_taxonomy,"bray"
)
vegdist(
otutable_on_taxonomy,"bray"
)
vegdist(
otutable_on_taxonomy,"bray"
method = "bray")
vegdist(
otutable_on_taxonomy,
method = "bray")
otutable_on_taxonomy
.data
.otutable_on_taxonomy
res.dist <- vegdist(
as.matrix(.otutable_on_taxonomy),
method = "jaccard")
X <- c(1,2,3)
X <- c(1,2,3)
Y <- c(1,2,3)
data.frame(X,Y)
sample(D$Y)
D <-data.frame(X,Y)
sample(D$Y)
Y <- c(5,6,7)
D <-data.frame(X,Y)
sample(D$Y)
mutinformation(D$X, D$Y)
require(infotheo)
mutinformation(D$X, D$Y)
mf.wrap.scatterplot <- function(D, data, ggdata){
.var.x     = D$var.x
.var.y     = D$var.y
.trans.y   = D$trans.y
.trans.x   = D$trans.x
.var.col   = D$var.col
.str       = D$str
.dn.surfix = D$dn.surfix
.cont.col  = 1 - (is.factor(.var.col) + is.character(.var.col))
#  .betas     = D[, c('b0','b1','b2','b3')]
mf.scatterplot(
data , ggdata,
.var.x, .var.y, .trans.y, .trans.x,
.var.col, .cont.col, .str, .dn.surfix#,
#    beatas=.betas
)
}
mf.boxplot <- function(
data,
ggdata,
var.x,
var.y,
size = 0.5,
var.col=NA,
str,
dn.surfix
){
formula.facet <- sprintf("%s ~ %s", ".", str)
n.str <- length(
t(
unique(data[,str])
)
)
pdf(
sprintf(
"%s/%s.pdf",
dir.output,
dn.surfix
),
width = 5 * n.str
)
if(
!is.na(var.col)
) plot.color <-
scale_color_gradient(low = "blue", high = "orange")
else  plot.color <-
scale_color_gradient(low = "black", high = "black")
plot(
plot.box_plot <-
ggdata +
geom_boxplot(
aes(
y   = get(var.y),
x   = get(var.x)
)
) +
geom_jitter(
aes(
y   = get(var.y),
x   = get(var.x),
color=get(var.col)
),
size = size,
width = 0.3
) +
plot.color +
scale_y_log10() +
facet_grid(
as.formula(formula.facet)
)
)
dev.off()
}
#' Make many boxplots from tydy ordering sheet
#'
#' @import
#'
#'
#' @param D <object; input> A data frame with variables (ind, var.x, var.y, trans.y, trans.x, var.col, str, dn.surfix)
#' @param data <object;> A data.frame-class object
#' @param ggdata <object; input> A object with ggplot-class
#' @param
#'
#' @export
mf.wrap.boxplot <- function(D, data, ggdata){
.var.x     = D$var.x
.var.y     = D$var.y
.var.col   = D$var.col
.str       = D$str
.dn.surfix = D$dn.surfix
mf.boxplot(data, ggdata, .var.x, .var.y, .var.col, .str, .dn.surfix)
}
#' Make many boxplots from tydy ordering sheet
#'
#' @import
#'
#'
#' @param data <object; input> A data frame with variables (ind, var.x, var.y, trans.y, trans.x, var.col, str, dn.surfix)
#' @param ggdata <object; input> A object with ggplot-class
#' @param
#'
#' @export
# Box plot -----------
mf.boxplot <- function(
data,
ggdata,
var.x,
var.y,
size = 0.5,
var.col=NA,
str,
dn.surfix
){
formula.facet <- sprintf("%s ~ %s", ".", str)
n.str <- length(
t(
unique(data[,str])
)
)
pdf(
sprintf(
"%s/%s.pdf",
dir.output,
dn.surfix
),
width = 5 * n.str
)
if(
!is.na(var.col)
) {
plot.color <-
scale_color_gradient(low = "blue", high = "orange")
jitter <- geom_jitter(
aes(
y   = get(var.y),
x   = get(var.x),
color=get(var.col)
),
size = size,
width = 0.3
)
}else{
plot.color <-
scale_color_gradient(low = "black", high = "black")
jitter <- geom_jitter(
aes(
y   = get(var.y),
x   = get(var.x)
),
size = size,
width = 0.3
)
}
plot(
plot.box_plot <-
ggdata +
geom_boxplot(
aes(
y   = get(var.y),
x   = get(var.x)
),
outlier.alpha = 0
) +
jitter +
plot.color +
scale_y_log10() +
facet_grid(
as.formula(formula.facet)
) +
theme_bw()
)
dev.off()
}
#' Make many boxplots from tydy ordering sheet
#'
#' @import
#'
#'
#' @param D <object; input> A data frame with variables (ind, var.x, var.y, trans.y, trans.x, var.col, str, dn.surfix)
#' @param data <object;> A data.frame-class object
#' @param ggdata <object; input> A object with ggplot-class
#' @param
#'
#' @export
mf.wrap.boxplot <- function(D, data, ggdata){
.var.x     = D$var.x
.var.y     = D$var.y
.var.col   = D$var.col
.str       = D$str
.dn.surfix = D$dn.surfix
mf.boxplot(data, ggdata, var.x=.var.x, var.y=.var.y, var.col=.var.col, str=.str, dn.surfix = .dn.surfix)
}
#' Make many scatterplots from tydy ordering sheet
#'
#'
#' @import
#'
#' @param
#' @param
#' @param
#'
#' @export
#'
# Scatter plot -------
mf.scatterplot <- function(
data, ggdata, var.x, var.y,
trans.y=c("log10", "identity"),
trans.x=c("log10", "identity"),
var.col, cont.col, str, dn.surfix, betas
){
formula.facet <- sprintf(
"%s ~ %s", ".",
str
)
if(cont.col == TRUE){
scale_colour <-
scale_color_gradient(
low  = "blue",
high = "orange"
)
} else
{
scale_colour <-
scale_color_brewer(
type="qual",
palette = "Dark2"
)
}
trans.y <- trans.y
trans.x <- trans.x
n.str <- length(
t(
unique(data[,str])
)
)
print(sprintf("strata=%s", n.str))
pdf(
sprintf(
"%s/%s.pdf",
dir.output,
dn.surfix
),
width = 7 * n.str
)
p =
ggdata +
geom_point(
aes(
y   = get(var.y),
x   = get(var.x),
col = get(var.col)
)
) +
geom_line(
aes(
y = exp(
betas[1] +
x * betas[2] +
str * betas[3] +
x * str * betas[4]
)
)
) +
facet_grid(
as.formula(formula.facet)
) +
scale_colour
if(
(trans.x=="NoScale") &
(trans.y=="NoScale")
){
print("No scaled")
plot(p)
}
if(
(trans.x=="NoScale") &
(trans.y!="NoScale")
){
print(" Y scaled")
plot(
p +
scale_y_continuous(trans=trans.y)
)
}
if(
(trans.x!="NoScale") &
(trans.y=="NoScale")
){
print(" X scaled")
plot(
p +
scale_x_continuous(trans=trans.x)
)
}
if(
(trans.x!="NoScale") &
(trans.y!="NoScale")
){
print("Both scaled")
plot(
p +
scale_y_continuous(trans=trans.x) +
scale_x_continuous(trans=trans.x)
)
}
dev.off()
}
mf.wrap.scatterplot <- function(D, data, ggdata){
.var.x     = D$var.x
.var.y     = D$var.y
.trans.y   = D$trans.y
.trans.x   = D$trans.x
.var.col   = D$var.col
.str       = D$str
.dn.surfix = D$dn.surfix
.cont.col  = 1 - (is.factor(.var.col) + is.character(.var.col))
#  .betas     = D[, c('b0','b1','b2','b3')]
mf.scatterplot(
data , ggdata,
.var.x, .var.y, .trans.y, .trans.x,
.var.col, .cont.col, .str, .dn.surfix#,
#    beatas=.betas
)
}
require(devtools)
document()
document()
document()
document()
document()
check()
use_package("metagenomeSeq")
check()
document()
document()
document()
use_package("metagenomeSeq")
check()
use_package("infotheo")
check()
check()
hepl(strsplit())
help(strsplit)
test <- "blue_orange"
strsplit(test, "_")
strsplit(test, "_")[1]
strsplit(test, "_")[[1]]
strsplit(test, "_")[[1]][1]
require(minerva)
install.packages("minerva")
require(minerva)
help("mine")
require(devtools)
document()
use_package(minerva)
use_package("minerva")
check()
check()
install.packages("XSL")
install.packages("XLS")
install.packages("xlsx")
require(xlsx)
require(xlsx)
require(xlsx)
require(devtools)
documment()
document()
use_package('survminer')
use_package('survival')
check()
use_package('rms')
check()
