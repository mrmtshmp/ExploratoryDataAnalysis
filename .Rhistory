usethis::create_package()
usethis::create_package(".")
help(create_package)
getwd()
usethis::create_package(getwd())
getwd()
devtools::check()
devtools::document()
usethis::use_package("ggplot2")
usethis::use_package("gplots")
usethis::use_package("tibble")
usethis::use_package("dplyr")
devtools::load_all()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
require(GGally)
devtools::document()
devtools::load_all()
devtools::check()
help(wrap_fn_with_param_arg)
devtools::document()
devtools::load_all()
devtools::check()
help(wrap_fn_with_param_arg)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
require(usethis)
usethis::check()
require(devtools)
devtools::check()
require(beeswarm)
require(devtools)
devtools::document
devtools::document()
devtools::check()
use_package('plyr')
devtools::check()
"Sex" = rep(c("F","M"), 2)
rep(c("F","M"), 20)
df.Name_type <- data.frame(
"ID"  = LETTERS[1:10],
"Sex" = rep(c("F","M"), 5)
)
df.Name_type
matrix(c(1:30), ncol=3)
df.Name_type <- data.frame(
"ID"  = LETTERS[1:10],
"Sex" = rep(c("F","M"), 5),
"val" = matrix(c(1:30), ncol=3)
)
df.Name_type
help("rep")
df.Name_type <- data.frame(
"ID"  = LETTERS[1:10],
"Sex" = rep(c("F","M"), times=5),
"val" = matrix(c(1:30), ncol=3)
)
df.Name_type
df.Name_type <- data.frame(
"ID"  = LETTERS[1:10],
"Sex" = rep(c("F","M"), times=5),
"val" = matrix(c(1:30), ncol=3)
) %>%
column_to_rownames("ID")
df.Name_type
mat.dist <- df.Name_type[
,c("val.1","val.2","val.3")
]
mat.dist
mat.dist <- df.Name_type[
,c("val.1","val.2","val.3")
] %>%
dist(
method = "manhattan"
)
mat.dist
Name_type <- data.frame(
"Name"  = rownames(df.Name_type),
"var"   = df.Name_type$Sex
)
d00 <- extract_type(
mat.dist,
Type_extr="Sex='F'",
Name_type=Name_type
)
d00 <- extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
debug(extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
)
Type_extr="Sex=='F'"
eval(parse(text=Type_extr))
Name_type %>%
filter(
eval(parse(text=Type_extr))
)
Name_type <- data.frame(
"Name"  = rownames(df.Name_type),
"var"   = df.Name_type$Sex
)
Name_type
mat.dist <- df.Name_type[
,c("val.1","val.2","val.3")
] %>%
dist(
method = "manhattan"
)
mat.dist
Type_extr
detach()
detach()
parse(text=Type_extr)
extract_type <- function(
dist,
Type_extr,
Name_type
){
names <- Name_type %>%
filter(parse(text=Type_extr))
# eval(parse(text=Type_extr))
# )
row_output <- dist %>%
as.matrix() %>%
data.frame() %>%
rownames_to_column("Name") %>%
filter(
Name %in% names$Name &
Name != "Name"
) %>%
dplyr::select(-Name)
return(
row_output[,names$Name] %>%
as.matrix() %>%
as.dist()
)
}
debug(extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
)
require(tibble)
df.Name_type <- data.frame(
"ID"  = LETTERS[1:10],
"Sex" = rep(c("F","M"), times=5),
"val" = matrix(c(1:30), ncol=3)
) %>%
column_to_rownames("ID")
mat.dist <- df.Name_type[
,c("val.1","val.2","val.3")
] %>%
dist(
method = "manhattan"
)
Name_type <- data.frame(
"Name"  = rownames(df.Name_type),
"var"   = df.Name_type$Sex
)
debug(extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
)
require(plyr)
debug(extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
)
require(dplyr)
debug(extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
)
extract_type <- function(
dist,
Type_extr,
Name_type
){
names <- Name_type %>%
filter(#parse(text=Type_extr))
eval(parse(text=Type_extr))
)
row_output <- dist %>%
as.matrix() %>%
data.frame() %>%
rownames_to_column("Name") %>%
filter(
Name %in% names$Name &
Name != "Name"
) %>%
dplyr::select(-Name)
return(
row_output[,names$Name] %>%
as.matrix() %>%
as.dist()
)
}
Type_extr
eval(parse(text=Type_extr))
Sex
rm(Sex)
debug(extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
)
Name_type
Name_type <- data.frame(
"Name"  = rownames(df.Name_type),
"Sex"   = df.Name_type$Sex
)
debug(extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
)
d00 <- extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
d00
require(devtools)
require(usethis)
devtools::document()
devtools::document()
#' dist-class object manupulation: Extract subjects
#'
#' @import tibble
#' @import dplyr
#' @import plyr
#'
#' @param dist <object; input> dist-class object with IDs as rownames and colnames
#' @param Type_extr <character strings; proccessing> condition to extract, e.g., "!is.na(var_name)"
#' @param Name_type <object; input> A data.frame-class object with 2 column: IDs and the variable used to extract IDs
#'
#' @export
extract_type <- function(
dist,
Type_extr,
Name_type
){
names <- Name_type %>%
dplyr::filter(#parse(text=Type_extr))
eval(parse(text=Type_extr))
)
row_output <- dist %>%
as.matrix() %>%
data.frame() %>%
rownames_to_column("Name") %>%
filter(
Name %in% names$Name &
Name != "Name"
) %>%
dplyr::select(-Name)
return(
row_output[,names$Name] %>%
as.matrix() %>%
as.dist()
)
}
#' @example
#'
require(plyr)
require(dplyr)
require(tibble)
df.Name_type <- data.frame(
"ID"  = LETTERS[1:10],
"Sex" = rep(c("F","M"), times=5),
"val" = matrix(c(1:30), ncol=3)
) %>%
column_to_rownames("ID")
mat.dist <- df.Name_type[
,c("val.1","val.2","val.3")
] %>%
dist(
method = "manhattan"
)
Name_type <- data.frame(
"Name"  = rownames(df.Name_type),
"Sex"   = df.Name_type$Sex
)
d00 <- extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
devtools::document()
usethis::use_package()
usethis::use_package("tibble")
usethis::use_package("plyr")
usethis::use_package("dplyr")
usethis::check()
devtools::check()
