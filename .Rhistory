)
mat.dist
Name_type <- data.frame(
"Name"  = rownames(df.Name_type),
"var"   = df.Name_type$Sex
)
d00 <- extract_type(
mat.dist,
Type_extr="Sex='F'",
Name_type=Name_type
)
d00 <- extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
debug(extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
)
Type_extr="Sex=='F'"
eval(parse(text=Type_extr))
Name_type %>%
filter(
eval(parse(text=Type_extr))
)
Name_type <- data.frame(
"Name"  = rownames(df.Name_type),
"var"   = df.Name_type$Sex
)
Name_type
mat.dist <- df.Name_type[
,c("val.1","val.2","val.3")
] %>%
dist(
method = "manhattan"
)
mat.dist
Type_extr
detach()
detach()
parse(text=Type_extr)
extract_type <- function(
dist,
Type_extr,
Name_type
){
names <- Name_type %>%
filter(parse(text=Type_extr))
# eval(parse(text=Type_extr))
# )
row_output <- dist %>%
as.matrix() %>%
data.frame() %>%
rownames_to_column("Name") %>%
filter(
Name %in% names$Name &
Name != "Name"
) %>%
dplyr::select(-Name)
return(
row_output[,names$Name] %>%
as.matrix() %>%
as.dist()
)
}
debug(extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
)
require(tibble)
df.Name_type <- data.frame(
"ID"  = LETTERS[1:10],
"Sex" = rep(c("F","M"), times=5),
"val" = matrix(c(1:30), ncol=3)
) %>%
column_to_rownames("ID")
mat.dist <- df.Name_type[
,c("val.1","val.2","val.3")
] %>%
dist(
method = "manhattan"
)
Name_type <- data.frame(
"Name"  = rownames(df.Name_type),
"var"   = df.Name_type$Sex
)
debug(extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
)
require(plyr)
debug(extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
)
require(dplyr)
debug(extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
)
extract_type <- function(
dist,
Type_extr,
Name_type
){
names <- Name_type %>%
filter(#parse(text=Type_extr))
eval(parse(text=Type_extr))
)
row_output <- dist %>%
as.matrix() %>%
data.frame() %>%
rownames_to_column("Name") %>%
filter(
Name %in% names$Name &
Name != "Name"
) %>%
dplyr::select(-Name)
return(
row_output[,names$Name] %>%
as.matrix() %>%
as.dist()
)
}
Type_extr
eval(parse(text=Type_extr))
Sex
rm(Sex)
debug(extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
)
Name_type
Name_type <- data.frame(
"Name"  = rownames(df.Name_type),
"Sex"   = df.Name_type$Sex
)
debug(extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
)
d00 <- extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
d00
require(devtools)
require(usethis)
devtools::document()
devtools::document()
#' dist-class object manupulation: Extract subjects
#'
#' @import tibble
#' @import dplyr
#' @import plyr
#'
#' @param dist <object; input> dist-class object with IDs as rownames and colnames
#' @param Type_extr <character strings; proccessing> condition to extract, e.g., "!is.na(var_name)"
#' @param Name_type <object; input> A data.frame-class object with 2 column: IDs and the variable used to extract IDs
#'
#' @export
extract_type <- function(
dist,
Type_extr,
Name_type
){
names <- Name_type %>%
dplyr::filter(#parse(text=Type_extr))
eval(parse(text=Type_extr))
)
row_output <- dist %>%
as.matrix() %>%
data.frame() %>%
rownames_to_column("Name") %>%
filter(
Name %in% names$Name &
Name != "Name"
) %>%
dplyr::select(-Name)
return(
row_output[,names$Name] %>%
as.matrix() %>%
as.dist()
)
}
#' @example
#'
require(plyr)
require(dplyr)
require(tibble)
df.Name_type <- data.frame(
"ID"  = LETTERS[1:10],
"Sex" = rep(c("F","M"), times=5),
"val" = matrix(c(1:30), ncol=3)
) %>%
column_to_rownames("ID")
mat.dist <- df.Name_type[
,c("val.1","val.2","val.3")
] %>%
dist(
method = "manhattan"
)
Name_type <- data.frame(
"Name"  = rownames(df.Name_type),
"Sex"   = df.Name_type$Sex
)
d00 <- extract_type(
mat.dist,
Type_extr="Sex=='F'",
Name_type=Name_type
)
devtools::document()
usethis::use_package()
usethis::use_package("tibble")
usethis::use_package("plyr")
usethis::use_package("dplyr")
usethis::check()
devtools::check()
require(GUniFrac)
require(ExploratoryDataAnalysis)
help(extract_type)
param.UniFrac= c(0, 0.5, 1.0, "UW")
.param.UniFrac <- param.UniFrac[-which("UW")]
.param.UniFrac <- param.UniFrac[-which(param.UniFrac=="UW")]
.param.UniFrac
.param.UniFrac <- as.numeric(
param.UniFrac[-which(param.UniFrac=="UW")]
)
.param.UniFrac
param.UniFrac= c(0, 0.5, 1.0)
as.numeric(
param.UniFrac[-which(param.UniFrac=="UW")]
)
which(param.UniFrac=="UW")
param.UniFrac[-which(param.UniFrac=="UW")]
param.UniFrac= c(0, 0.5, 1.0, "UW")
param.UniFrac[-which(param.UniFrac=="UW")]
param.UniFrac[-0]
param.UniFrac= c(0, 0.5, 1.0, "UW")
.param.UniFrac <- param.UniFrac(
-which(
param.UniFrac %in% "UW"
)
)
.param.UniFrac <- param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
]
.param.UniFrac
param.UniFrac= c(0, 0.5, 1.0)
.param.UniFrac <- param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
]
.param.UniFrac
param.UniFrac= c(0, 0.5, 1.0, "UW")
.param.UniFrac <- param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
]
.param.UniFrac <- param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
]
param.UniFrac
.param.UniFrac <- param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
]
.param.UniFrac
if(which(param.UniFrac %in% "UW")>0){
.param.UniFrac <- param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
]
} else .param.UniFrac <- param.UniFrac
.param.UniFrac
param.UniFrac= c(0, 0.5, 1.0)
if(which(param.UniFrac %in% "UW")>0){
.param.UniFrac <- param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
]
} else .param.UniFrac <- param.UniFrac
if(length(which(param.UniFrac) %in% "UW")>0){
.param.UniFrac <- param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
]
} else .param.UniFrac <- param.UniFrac
if(length(which(param.UniFrac %in% "UW")>0)){
.param.UniFrac <- param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
]
} else .param.UniFrac <- param.UniFrac
.param.UniFrac
param.UniFrac= c(0, 0.5, 1.0, "UW")
if(length(which(param.UniFrac %in% "UW")>0)){
.param.UniFrac <- param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
]
} else .param.UniFrac <- param.UniFrac
.param.UniFrac
if(length(which(param.UniFrac %in% "UW")>0)){
.param.UniFrac <- as.numeric(
param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
])
UW <- TRUE
} else {
.param.UniFrac <- param.UniFrac
UW <- FALSE
}
.method="UniFrac"
if(
.method=="UniFrac" &
length(.param.UniFrac) > 0
){
unifrac_relative <- GUniFrac(
otutable_on_taxonomy,
tree  = tree_phylo,
alpha = .param.UniFrac
)
for(i in 1:length(.param.UniFrac))
assign(
sprintf(
"d%s_relative",
.param.UniFrac[i]),
unifrac_relative[[1]][
,,
sprintf("d_%s", .param.UniFrac[i])
]
)
}
help("assign")
.GlobalEnv
require(devtools())
documents()
document()
document()
use_package("vegan")
use_package("GUnifrac")
use_package("GUniFrac")
use_package("tibble")
check()
param.UniFrac= c(0, 0.5, 1.0, "UW")
if(length(which(param.UniFrac %in% "UW")>0)){
.param.UniFrac <- as.numeric(
param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
])
.UW <- TRUE
} else {
.param.UniFrac <- param.UniFrac
.UW <- FALSE
}
.param.UniFrac
method <- "bray"
type_extr="Type%in%c(3,4)"
Name_type=df.Name_type
otutable_on_taxonomy <- data
.method    <- method
.type_extr <- type_extr
.Name_type <- Name_type
if(length(which(param.UniFrac %in% "UW")>0)){
.param.UniFrac <- as.numeric(
param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
])
.UW <- TRUE
print(.param.UniFrac)
} else {
.param.UniFrac <- param.UniFrac
.UW <- FALSE
print(.param.UniFrac)
}
param.UniFrac= c(0, 0.5, 1.0, "UW")
otutable_on_taxonomy <- data
.method    <- method
.type_extr <- type_extr
.Name_type <- Name_type
if(length(which(param.UniFrac %in% "UW")>0)){
.param.UniFrac <- as.numeric(
param.UniFrac[
-which(
param.UniFrac %in% "UW"
)
])
.UW <- TRUE
print(.param.UniFrac)
} else {
.param.UniFrac <- param.UniFrac
.UW <- FALSE
print(.param.UniFrac)
}
sprintf("d%s_vegan", .method)
vegan::vegdist(
otutable_on_taxonomy,
method = .method
) %>%
extract_type(
extract_type,
df.Name_type
)
assign(
sprintf("d%s_vegan", .method),
vegan::vegdist(
otutable_on_taxonomy,
method = .method
) %>%
extract_type(
extract_type,
df.Name_type
)
)
vegan::vegdist(
otutable_on_taxonomy,
method = .method
) %>%
extract_type(
extract_type,
df.Name_type
)
vegan::vegdist(
otutable_on_taxonomy,
method = .method
)
otutable_on_taxonomy
otutable_on_taxonomy
help(vegdist)
vegdist(
.otutable_on_taxonomy,
method = .method
)
vegdist(
otutable_on_taxonomy,
method = .method
)
otutable_on_taxonomy
vegdist(
otutable_on_taxonomy,
method = .method
)
vegdist(
.otutable_on_taxonomy,"bray"
)
vegdist(
otutable_on_taxonomy,"bray"
)
vegdist(
otutable_on_taxonomy,"bray"
method = "bray")
vegdist(
otutable_on_taxonomy,
method = "bray")
otutable_on_taxonomy
.data
.otutable_on_taxonomy
res.dist <- vegdist(
as.matrix(.otutable_on_taxonomy),
method = "jaccard")
X <- c(1,2,3)
X <- c(1,2,3)
Y <- c(1,2,3)
data.frame(X,Y)
sample(D$Y)
D <-data.frame(X,Y)
sample(D$Y)
Y <- c(5,6,7)
D <-data.frame(X,Y)
sample(D$Y)
mutinformation(D$X, D$Y)
require(infotheo)
mutinformation(D$X, D$Y)
require(devtools)
document()
use_package("infotheo")
check()
