if( !is.null(S)) {vec.consis <-
data.frame(X=X,Y=Y,S=S) %>%
ddply(
.(S),
function(d){
d <- d %>%
mutate(
consis= ifelse(X==Y, 1, 0)
)
consis <- mean(d$consis)
}
)
}
return(m1a * consis)
}
)
}
}else{
output <- ddply(
df.pmt,
.(i),
function(itt){
i.numb <- unique(itt$i)
if(i.numb > 1) D$Y <- sample(D$Y)
m1a <- minerva::mine(
x=(D$X),
y=(D$Y),
alpha = alpha,
...
)
return(c(m1a$MIC, m1a$MAS, m1a$MEV, m1a$MCN, m1a$`MIC-R2`, m1a$GMIC, m1a$TIC))
}
)
}
return(output)
}
require(plyr)
require(dplyr)
require(tidyr)
require(tibble)
MICorrPermute <- function(
X,
Y,
S=NULL,
method='emp',
disc.X='equalfreq',
disc.Y='equalfreq',
alpha = 0.6,
n.sim = 2000,
...
){
D <- data.frame('X'=unname(X), 'Y'=unname(Y))
df.pmt <- data.frame(
i=seq(1:n.sim),
j=seq(1:n.sim)
)
if(
method !="MIC" &
disc.X != "none" &
disc.Y != "none"
){
output <- ddply(
df.pmt,
.(i),
function(itt){
i.numb <- unique(itt$i)
if(i.numb > 1) D$Y <- sample(D$Y)
X=discretize(D$X, disc = disc.X, nbins = )
Y=discretize(D$Y, disc = disc.Y, nbins = )
if(is.null(S)){
m1a <- infotheo::mutinformation(
X=X,
Y=Y,
S=D$S,
method = method
)/ infotheo::entropy(unique(X,Y), methos=method)
}else{
m1a <- infotheo::condinformation(
X=X,
Y=Y,
S=D$S,
method = method
)/ infotheo::entropy(unique(X, Y), method = method)
}
return(m1a)
}
)
}else{
if(
method !="MIC" &
disc.X == "none" &
disc.Y == "none"
){
output <- ddply(
df.pmt,
.(i),
function(itt){
i.numb <- unique(itt$i)
if(i.numb > 1) D$Y <- sample(D$Y)
X=as.factor(D$X)
Y=as.factor(D$Y)
if(is.null(S)){
m1a <- infotheo::mutinformation(
X=X,
Y=Y,
method = method
)/ infotheo::entropy(unique(X, Y, method=method))
} else{
m1a <- infotheo::condinformation(
X=X,
Y=Y,
S=D$S,
method = method
)/ infotheo::entropy(unique(X, Y, method=method))
}
if( is.null(S)) {vec.consis <-
data.frame(X=X,Y=Y) %>%
mutate(
consis= ifelse(X==Y, 1, 0)
)
consis <- mean(vec.consis$consis)
}
if( !is.null(S)) {vec.consis <-
data.frame(X=X,Y=Y,S=S) %>%
ddply(
.(S),
function(d){
d <- d %>%
mutate(
consis= ifelse(X==Y, 1, 0)
)
consis <- mean(d$consis)
}
)
}
return(m1a * consis)
}
)
}
}else{
output <- ddply(
df.pmt,
.(i),
function(itt){
i.numb <- unique(itt$i)
if(i.numb > 1) D$Y <- sample(D$Y)
m1a <- minerva::mine(
x=(D$X),
y=(D$Y),
alpha = alpha,
...
)
return(c(m1a$MIC, m1a$MAS, m1a$MEV, m1a$MCN, m1a$`MIC-R2`, m1a$GMIC, m1a$TIC))
}
)
}
return(output)
}
MICorrPermute <- function(
X,
Y,
S=NULL,
method='emp',
disc.X='equalfreq',
disc.Y='equalfreq',
alpha = 0.6,
n.sim = 2000,
...
){
D <- data.frame('X'=unname(X), 'Y'=unname(Y))
df.pmt <- data.frame(
i=seq(1:n.sim),
j=seq(1:n.sim)
)
if(
method !="MIC" &
disc.X != "none" &
disc.Y != "none"
){
output <- ddply(
df.pmt,
.(i),
function(itt){
i.numb <- unique(itt$i)
if(i.numb > 1) D$Y <- sample(D$Y)
X=discretize(D$X, disc = disc.X, nbins = )
Y=discretize(D$Y, disc = disc.Y, nbins = )
if(is.null(S)){
m1a <- infotheo::mutinformation(
X=X,
Y=Y,
S=D$S,
method = method
)/ infotheo::entropy(unique(X,Y), methos=method)
}else{
m1a <- infotheo::condinformation(
X=X,
Y=Y,
S=D$S,
method = method
)/ infotheo::entropy(unique(X, Y), method = method)
}
return(m1a)
}
)
}else{
if(
method !="MIC" &
disc.X == "none" &
disc.Y == "none"
){
output <- ddply(
df.pmt,
.(i),
function(itt){
i.numb <- unique(itt$i)
if(i.numb > 1) D$Y <- sample(D$Y)
X=as.factor(D$X)
Y=as.factor(D$Y)
if(is.null(S)){
m1a <- infotheo::mutinformation(
X=X,
Y=Y,
method = method
)/ infotheo::entropy(unique(X, Y, method=method))
}else{
m1a <- infotheo::condinformation(
X=X,
Y=Y,
S=D$S,
method = method
)/ infotheo::entropy(unique(X, Y, method=method))
}
if( is.null(S)) {vec.consis <-
data.frame(X=X,Y=Y) %>%
mutate(
consis= ifelse(X==Y, 1, 0)
)
consis <- mean(vec.consis$consis)
}
if( !is.null(S)) {vec.consis <-
data.frame(X=X,Y=Y,S=S) %>%
ddply(
.(S),
function(d){
d <- d %>%
mutate(
consis= ifelse(X==Y, 1, 0)
)
consis <- mean(d$consis)
}
)
}
return(m1a * consis)
}
)
}
}else{
output <- ddply(
df.pmt,
.(i),
function(itt){
i.numb <- unique(itt$i)
if(i.numb > 1) D$Y <- sample(D$Y)
m1a <- minerva::mine(
x=(D$X),
y=(D$Y),
alpha = alpha,
...
)
return(c(m1a$MIC, m1a$MAS, m1a$MEV, m1a$MCN, m1a$`MIC-R2`, m1a$GMIC, m1a$TIC))
}
)
}
return(output)
}
MICorrPermute <- function(
X,
Y,
S=NULL,
method='emp',
disc.X='equalfreq',
disc.Y='equalfreq',
alpha = 0.6,
n.sim = 2000,
...
){
D <- data.frame('X'=unname(X), 'Y'=unname(Y))
df.pmt <- data.frame(
i=seq(1:n.sim),
j=seq(1:n.sim)
)
if(
method !="MIC" &
disc.X != "none" &
disc.Y != "none"
){
output <- ddply(
df.pmt,
.(i),
function(itt){
i.numb <- unique(itt$i)
if(i.numb > 1) D$Y <- sample(D$Y)
X=discretize(D$X, disc = disc.X, nbins = )
Y=discretize(D$Y, disc = disc.Y, nbins = )
if(is.null(S)){
m1a <- infotheo::mutinformation(
X=X,
Y=Y,
S=D$S,
method = method
)/ infotheo::entropy(unique(X,Y), methos=method)
}else{
m1a <- infotheo::condinformation(
X=X,
Y=Y,
S=D$S,
method = method
)/ infotheo::entropy(unique(X, Y), method = method)
}
return(m1a)
}
)
}else{
if(
method !="MIC" &
disc.X == "none" &
disc.Y == "none"
){
output <- ddply(
df.pmt,
.(i),
function(itt){
i.numb <- unique(itt$i)
if(i.numb > 1) D$Y <- sample(D$Y)
X=as.factor(D$X)
Y=as.factor(D$Y)
if(is.null(S)){
m1a <- infotheo::mutinformation(
X=X,
Y=Y,
method = method
)/ infotheo::entropy(unique(X, Y, method=method))
}
}else{
m1a <- infotheo::condinformation(
X=X,
Y=Y,
S=D$S,
method = method
)/ infotheo::entropy(unique(X, Y, method=method))
}
if( is.null(S)) {vec.consis <-
data.frame(X=X,Y=Y) %>%
mutate(
consis= ifelse(X==Y, 1, 0)
)
consis <- mean(vec.consis$consis)
}
if( !is.null(S)) {vec.consis <-
data.frame(X=X,Y=Y,S=S) %>%
ddply(
.(S),
function(d){
d <- d %>%
mutate(
consis= ifelse(X==Y, 1, 0)
)
consis <- mean(d$consis)
}
)
}
return(m1a * consis)
}
)
}else{
output <- ddply(
df.pmt,
.(i),
function(itt){
i.numb <- unique(itt$i)
if(i.numb > 1) D$Y <- sample(D$Y)
m1a <- minerva::mine(
x=(D$X),
y=(D$Y),
alpha = alpha,
...
)
return(c(m1a$MIC, m1a$MAS, m1a$MEV, m1a$MCN, m1a$`MIC-R2`, m1a$GMIC, m1a$TIC))
}
)
}
}
return(output)
}
MICorrPermute <- function(
X,
Y,
S=NULL,
method='emp',
disc.X='equalfreq',
disc.Y='equalfreq',
alpha = 0.6,
n.sim = 2000,
...
){
D <- data.frame('X'=unname(X), 'Y'=unname(Y))
df.pmt <- data.frame(
i=seq(1:n.sim),
j=seq(1:n.sim)
)
if(
method !="MIC" &
disc.X != "none" &
disc.Y != "none"
){
output <- ddply(
df.pmt,
.(i),
function(itt){
i.numb <- unique(itt$i)
if(i.numb > 1) D$Y <- sample(D$Y)
X=discretize(D$X, disc = disc.X, nbins = )
Y=discretize(D$Y, disc = disc.Y, nbins = )
if(is.null(S)){
m1a <- infotheo::mutinformation(
X=X,
Y=Y,
S=D$S,
method = method
)/ infotheo::entropy(unique(X,Y), methos=method)
}else{
m1a <- infotheo::condinformation(
X=X,
Y=Y,
S=D$S,
method = method
)/ infotheo::entropy(unique(X, Y), method = method)
}
return(m1a)
}
)
}else{
if(
method !="MIC" &
disc.X == "none" &
disc.Y == "none"
){
output <- ddply(
df.pmt,
.(i),
function(itt){
i.numb <- unique(itt$i)
if(i.numb > 1) D$Y <- sample(D$Y)
X=as.factor(D$X)
Y=as.factor(D$Y)
if(is.null(S)){
m1a <- infotheo::mutinformation(
X=X,
Y=Y,
method = method
)/ infotheo::entropy(unique(X, Y, method=method))
} else{
m1a <- infotheo::condinformation(
X=X,
Y=Y,
S=D$S,
method = method
)/ infotheo::entropy(unique(X, Y, method=method))
}
if( is.null(S)) {vec.consis <-
data.frame(X=X,Y=Y) %>%
mutate(
consis= ifelse(X==Y, 1, 0)
)
consis <- mean(vec.consis$consis)
}
if( !is.null(S)) {vec.consis <-
data.frame(X=X,Y=Y,S=S) %>%
ddply(
.(S),
function(d){
d <- d %>%
mutate(
consis= ifelse(X==Y, 1, 0)
)
consis <- mean(d$consis)}
)
}
return(m1a * consis)
}
)
}else{
output <- ddply(
df.pmt,
.(i),
function(itt){
i.numb <- unique(itt$i)
if(i.numb > 1) D$Y <- sample(D$Y)
m1a <- minerva::mine(
x=(D$X),
y=(D$Y),
alpha = alpha,
...
)
return(c(m1a$MIC, m1a$MAS, m1a$MEV, m1a$MCN, m1a$`MIC-R2`, m1a$GMIC, m1a$TIC))
}
)
}
}
return(output)
}
